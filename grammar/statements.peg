/* Statements */

PrimitiveTypeStatement
  = PrimitiveValueExpression
  / UnquotedStringLiteral

MainStatement
  = Comment
  / ValueBlockStatement
  / BlockStatement

Statement
  = MainStatement
  / PrimitiveTypeStatement

StatementList
  = Statement
  / PrimitiveValueExpression
  / UnquotedStringLiteral

ListElementStatement
  = MainStatement
  / PrimitiveValueExpression
  / UnquotedStringListLiteral

BlockAsignmentOperator
  = operator:(AsignRawOperator
  / VariableAssignOperator
  / StartToken) {
    return operator[0];
  }

ListBlockStatement
  = head:ListElementStatement tail:(__ ElementSeparator? __ ListElementStatement)* {
    var result = [ head ];
    for (var i = 0, l = tail.length; i < l; i+=1) {
      result.push(tail[i][3]);
    }
    return result;
  }

BlockElementStatement
  = head:StatementList tail:(__ ElementSeparator? __ StatementList)* {
    var result = [ head ];
    for (var i = 0, l = tail.length; i < l; i+=1) {
      result.push(tail[i][3]);
    }
    return result;
  }

ValueBlockStatement
  = id:IdentifierExpression _ operator:BlockAsignmentOperator
      _ !LineTerminatorSequence
      _ body:(MainStatement / body:PrimitiveTypeStatement _ EOS { return body; })
    {
      return astNode({
        type:    'ExpressionStatement',
        expression: astNode({
          type:     'ValueBlockStatement',
          operator: operator,
          left:     id,
          right:    body
        })
      });
    }

// todo: pending create specific nested blocks
// with support for list of elements comma separated
BlockStatement
  = id:IdentifierExpression __ operator:BlockAsignmentOperator
    __ body:BlockElementStatement __ EndToken
    {
      return astNode({
        type:    'ExpressionStatement',
        expression: astNode({
          type:     'BlockStatement',
          operator: operator,
          left:     id,
          right:    {
            type: 'BodyStatement',
            body: body !== null ? body : []
          }
        })
      });
    }
