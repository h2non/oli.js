/* Statements */

Statement
  = MainStatement
  / PrimitiveTypeStatement

PrimitiveTypeStatement
  = PrimitiveValueExpression
  / UnquotedStringLiteral

MainStatement
  = Comment
  / BlockPipeStatement
  / BlockAttributeStatement
  / BlockRawStatement
  / ValueStatement
  / BlockStatement
  / DentBlockStatement

ListElementStatement
  = MainStatement
  / PrimitiveValueExpression
  / UnquotedStringListLiteral

InLineListElementsStatement
  = MainStatement
  / PrimitiveValueExpression
  / UnquotedStringListLiteral

ListBlockStatement
  = head:ListElementStatement tail:(__ ElementSeparator? __ ListElementStatement)* {
    var result = [ head ];
    for (var i = 0, l = tail.length; i < l; i += 1) {
      result.push(tail[i][3]);
    }
    return result;
  }

InLineListBlockStatement
  = head:InLineListElementsStatement tail:(_ "," _ el:InLineListElementsStatement { return el; })* {
    var result = [ head ];
    for (var i = 0, l = tail.length; i < l; i += 1) {
      result.push(tail[i]);
    }
    return result;
  }

BlockElementStatement
  = head:Statement tail:(__ ElementSeparator? __ Statement)* {
    var result = [ head ];
    for (var i = 0, l = tail.length; i < l; i += 1) {
      result.push(tail[i][3]);
    }
    return result;
  }

ValueStatement
  = "{"? _ id:IdentifierExpression _ operator:AsignNotOperator _ ("}" / PipeOperator / EOS) {
      return astNode({
        type:    'ExpressionStatement',
        expression: astNode({
          type:     'ValueStatement',
          operator: operator,
          left:     id,
          right:    null
        })
      });
    }
  / "{"? _ id:IdentifierExpression _ operator:BlockAsignmentOperator _ !LineTerminatorSequence
      _ body:(MainStatement / body:PrimitiveTypeStatement _ ("}" / EOS) { return body; })
    {
      return astNode({
        type:    'ExpressionStatement',
        expression: astNode({
          type:     'ValueStatement',
          operator: operator,
          left:     id,
          right:    operator === '!:' ? null : body
        })
      });
    }

PipeStatement
  = operator:PipeOperator _ body:(MainStatement / PrimitiveTypeStatement) {
    return astNode({
      type:     'PipeStatement',
      operator: operator,
      body:     body !== null ? body : []
    });
  }

BlockPipeStatement
  = PipeOperator? __ id:IdentifierExpression __ operator:BlockAsignmentOperator
    __ head:PipeStatement __ tail:(__ PipeStatement)* {
      var body = [ head ];
      for (var i = 0, l = tail.length; i < l; i += 1) {
        body.push(tail[i][1]);
      }
      return astNode({
        type:    'ExpressionStatement',
        expression: astNode({
          type:     'BlockStatement',
          operator: operator,
          left:     id,
          right:    operator === '!:' ? null : {
            type: 'BodyStatement',
            body: body !== null ? body : []
          }
        })
      });
    }

BlockAttributeStatement
  = expr:IdenfitierAttributeExpression _ EOS {
    return astNode({
      type:       'ExpressionStatement',
      expression: expr
    })
  }

BlockRawStatement
  = id:IdentifierExpression __ operator:BlockAsignmentRawOperators __
  body:(
      body:(!EndToken c:StringRawCharacter { return c; })* __ EndToken { return body }
    / body:(!EOS c:StringRawCharacter { return c; })* _ EOS { return body }
  ) {
      if (body) {
        body = body.join('').trim()
      }
      return astNode({
        type:    'ExpressionStatement',
        expression: astNode({
          type:     'BlockStatement',
          operator: operator,
          left:     id,
          right:    operator === '!:' ? null : {
            type: 'BodyStatement',
            raw:  true,
            body: body ? astNode({
              type:  'StringLiteral',
              value: body,
              raw:   body,
              template: true
            }) : null
          }
        })
      });
    }

BlockStatement
  = id:IdentifierExpression __ operator:BlockAsignmentOperator
    __ body:BlockElementStatement __ EndToken
    {
      return astNode({
        type:    'ExpressionStatement',
        expression: astNode({
          type:     'BlockStatement',
          operator: operator,
          left:     id,
          right:    operator === '!:' ? null : {
            type: 'BodyStatement',
            body: body !== null ? body : []
          }
        })
      });
    }

DentBlockElement
  = INDENT tail:(DentBlockStatement / PrimitiveTypeStatement) _ EOL?
  head:(SAMEDENT head:(MainStatement / ValueStatement / p:PrimitiveTypeStatement _ EOL { return p; }) { return head; })* DEDENT {
    return [ tail ].concat(head)
  }

DentBlockStatement
  = id:IdentifierExpression __ operator:BlockAsignmentOperator
    _ EOL body:DentBlockElement
    {
      return astNode({
        type:    'ExpressionStatement',
        expression: astNode({
          type:     'BlockStatement',
          operator: operator,
          left:     id,
          right:    operator === '!:' ? null : {
            type: 'BodyStatement',
            body: body !== null ? body : []
          }
        })
      });
    }
