/* Statements */

PrimitiveTypeStatement
  = PrimitiveValueExpression
  / UnquotedStringLiteral

MainStatement
  = Comment
  / BlockPipeStatement
  / ValueStatement
  / BlockStatement

Statement
  = MainStatement
  / PrimitiveTypeStatement

ListElementStatement
  = MainStatement
  / PrimitiveValueExpression
  / UnquotedStringListLiteral

BlockAsignmentOperator
  = operator:(
    VariableAssignOperator
  / AsignNotOperator
  / AsignRawOperator
  / AsignUnfoldOperator
  / AsignFoldOperator
  / StartToken) {
    return Array.isArray(operator) ? operator.join('') : operator;
  }

ListBlockStatement
  = head:ListElementStatement tail:(__ ElementSeparator? __ ListElementStatement)* {
    var result = [ head ];
    for (var i = 0, l = tail.length; i < l; i+=1) {
      result.push(tail[i][3]);
    }
    return result;
  }

BlockElementStatement
  = head:Statement tail:(__ ElementSeparator? __ Statement)* {
    var result = [ head ];
    for (var i = 0, l = tail.length; i < l; i+=1) {
      result.push(tail[i][3]);
    }
    return result;
  }

ValueStatement
  = id:IdentifierExpression _ operator:AsignNotOperator _ EOS {
      return astNode({
        type:    'ExpressionStatement',
        expression: astNode({
          type:     'ValueStatement',
          operator: operator,
          left:     id,
          right:    null
        })
      });
    }
  / id:IdentifierExpression _ operator:BlockAsignmentOperator
      _ !LineTerminatorSequence
      _ body:(MainStatement / body:PrimitiveTypeStatement _ EOS { return body; })
    {
      return astNode({
        type:    'ExpressionStatement',
        expression: astNode({
          type:     'ValueStatement',
          operator: operator,
          left:     id,
          right:    operator === ':!' ? null : body
        })
      });
    }

PipeStatement
  = operator:PipeOperator _ body:PrimitiveTypeStatement {
    return astNode({
      type:     'PipeStatement',
      operator: operator,
      body:     body !== null ? body : []
    });
  }

BlockPipeStatement
  = PipeOperator? __ id:IdentifierExpression __ operator:BlockAsignmentOperator
    __ head:PipeStatement __ tail:(__ PipeStatement)* {
      var body = [ head ];
      for (var i = 0, l = tail.length; i < l; i+=1) {
        body.push(tail[i][1]);
      }
      return astNode({
        type:    'ExpressionStatement',
        expression: astNode({
          type:     'BlockStatement',
          operator: operator,
          left:     id,
          right:    operator === ':!' ? null : {
            type: 'BodyStatement',
            body: body !== null ? body : []
          }
        })
      });
    }

BlockStatement
  = id:IdentifierExpression __ operator:BlockAsignmentOperator
    __ body:BlockElementStatement __ EndToken
    {
      return astNode({
        type:    'ExpressionStatement',
        expression: astNode({
          type:     'BlockStatement',
          operator: operator,
          left:     id,
          right:    operator === ':!' ? null : {
            type: 'BodyStatement',
            body: body !== null ? body : []
          }
        })
      });
    }
