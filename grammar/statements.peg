/* Statements */

Statement
  = Comment
  / CopyStatement
  / ValueBlockStatement
  / BlockStatement

BlockElement
  = head:ListElementsExpressions value:(__ ElementSeparator?
   __ value:ListElementsExpressions { return value; })* {
      var result = [ head ];
      for (var i = 0, l = value.length; i < l; i+=1) {
        result.push(value[i]);
      }
      return result;
    }

CopyStatement
  = id:IdentifierExpression __ CopyToken
      __ source:IdentifierExpression __
    __ (EndToken / EOS) {
      return astNode({
        type:     "CopyStatement",
        id:       id,
        source:   source
      });
    }

ValueBlockStatement
  = id:IdentifierExpression _ StartToken
      _ body:(Statement / body:(PrimitiveValueExpression / UnquotedStringListLiteral) _
    EOS { return body; }) {
      return astNode({
        type:     "ValueBlockStatement",
        id:       id,
        body:     body !== null ?
          (Array.isArray(body) ? body : [ body ]) : []
      });
    }

// todo: pending create specific nested blocks support
// support for list of elements comma separated
BlockStatement
  = id:IdentifierExpression __ StartToken __
    body:(
        Comment
      / body:(id:IdentifierExpression _ StartToken _ value:PrimitiveValueExpression+ {
          return astNode({
            type: 'InnerBlockStatement',
            id:   id,
            body: value
          })
        })
      / BlockStatement
      / (__ value:PrimitiveValueExpression __ { return value; })
    )+ __ EndToken {
      return astNode({
        type:     "BlockStatement",
        id:       id,
        body:     body !== null ? body : []
      });
    }
