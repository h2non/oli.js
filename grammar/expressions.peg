/* Expressions */
_
  = (WhiteSpace / Comment)*
__
  = (WhiteSpace / LineTerminatorSequence / Comment)*

PrimitiveTerminatorSequence
 = &("," / "]" / ")" / EOS)

// to do: separate rule in especific expressions contexts
PrimitiveValueExpression
  = exp:BooleanLiteral _ PrimitiveTerminatorSequence { return exp; }
  / exp:ReferenceExpression _ PrimitiveTerminatorSequence { return exp; }
  / exp:NumberLiteral _ PrimitiveTerminatorSequence { return exp; }
  / StringLiteral
  / ListExpression

LiteralReservedTokens
  = ":" / RelationalNotOperator / LineTerminator / CommentToken / EndToken / "[" / "]"

LiteralSequenceCharacters
  = !LiteralReservedTokens char:SingleStringCharacter { return char; }

LiteralSequenceListCharacters
  = !("," / LiteralReservedTokens) char:SingleStringCharacter { return char; }

UnquotedStringLiteral "unquoted literal"
  = !"-" _ chars:LiteralSequenceCharacters+ {
    return astNode({
      type: 'StringLiteral',
      value: chars.join('').trim(),
      raw: chars.join(''),
      template: true
    })
  }

UnquotedStringListLiteral "unquoted literal"
  = !"-" _ chars:LiteralSequenceListCharacters+ _ ("," / &EOS) {
    return astNode({
      type: 'StringLiteral',
      value: chars.join('').trim(),
      raw: chars.join(''),
      template: true
    })
  }

IdentifierWord
  = !LiteralReservedTokens letters:(IdentifierLetter / WhiteSpace)+ {
    return letters.join("");
  }

Identifier "identifier"
  = !ReservedWord name:IdentifierWord {
    return astNode({
      type: 'Identifier',
      name: name.trim()
    });
  }

ReferenceIdentifier "reference"
  = !ReservedWord name:(!LiteralReservedTokens letters:IdentifierLetter+ {
    return letters.join("");
  }) {
    return astNode({
      type: 'Identifier',
      name: name
    });
  }

IdentifierName "identifier"
  = UnquotedStringLiteral

IdentifierCharacter
  = [\-\.\_\$\!]

IdentifierStart
  = UnicodeLetter
  / "_"
  / "\\" sequence:UnicodeEscapeSequence { return sequence; }

IdentifierPart
  = IdentifierCharacter
  / IdentifierStart
  / UnicodeCombiningMark
  / UnicodeDigit
  / UnicodeConnectorPunctuation
  / "\u200C" { return "\u200C"; } // zero-width non-joiner
  / "\u200D" { return "\u200D"; } // zero-width joiner

/* Value reference */

ReferenceLiteralExpression
  = id:StringLiteral {
      return id.value;
    }
  / "{" __ id:(ReferenceIdentifier / StringLiteral)__ "}" {
      return id.value ? id.value : id.name.trim();
    }
  / id:ReferenceIdentifier {
      return id.name.trim();
    }

ReferenceExpression
  = ReferenceOperator name:ReferenceLiteralExpression {
    return astNode({
      type: 'ReferenceExpression',
      name: name
    })
  }

/* Block Indentifier Expressions */

IdentifierLiteralExpression
  = StringLiteral
  / "{" __ id:(Identifier / StringLiteral)__ "}" {
      return id;
    }
  / Identifier

IdentifierNameExpression
  = ReferenceExpression / IdentifierReferenceExpression / IdentifierLiteralExpression

IdentifierOperationExpression
  = id:(IdentifierBinaryExpression / IdentifierUnaryExpression)+ {
    if (id.length <= 1) {
      return id[0];
    } else {
      return id;
    }
  }

IdentifierBinaryExpression
  = left:IdentifierCloneExpression
    __ right:IdentifierArrowReferenceExpression {
    return {
      type:  'BinaryExpression',
      left:  left,
      right: right
    };
  }

IdentifierUnaryExpression
  = operator:(
        MergeOperator
      / ExtendOperator
      / RelationalNotOperator
      / RelationalOperator
    ) __ argument:IdentifierLiteralExpression {
    return astNode({
      type:     'UnaryExpression',
      operator: operator,
      argument: argument
    })
  }

IdentifierReferenceExpression
  = operator:(AnchorNotOperator / AnchorOperator) __ argument:IdentifierLiteralExpression {
    return astNode({
      type:     'UnaryExpression',
      operator: operator,
      argument: argument
    })
  }

IdentifierArrowReferenceExpression
  = operator:(RelationalNotOperator / RelationalOperator)__ argument:IdentifierLiteralExpression {
    return astNode({
      type:     'UnaryExpression',
      operator: operator,
      argument: argument
    })
  }

IdentifierCloneExpression
  = operator:(MergeOperator / ExtendOperator) __ argument:IdentifierLiteralExpression {
    return astNode({
      type:     'UnaryExpression',
      operator: operator,
      argument: argument
    })
  }

AttributeExpression
  = id:IdentifierNameExpression __ value:(StartToken __ value:(PrimitiveValueExpression / IdentifierLiteralExpression) {
      return value;
    })? {
    var node = astNode({
      type:  'AttributeExpression',
      left:  id
    });
    if (value) {
      if (value.type === 'Identifier') {
        node.right = astNode({
          type:     'StringLiteral',
          value:    value.name,
          raw:      value.name,
          template: true
        });
      } else {
        node.right = value;
      }
    }
    return node;
  }

IdentifierAttributesList
  = head:AttributeExpression tail:(__ "," __ AttributeExpression)* {
    var result = [ head ];
    for (var i = 0, l = tail.length; i < l; i+=1) {
      result.push(tail[i][3]);
    }
    return result;
  }

IdentifierAttributesExpression
  = "(" __ attrs:IdentifierAttributesList? __ ")" {
    return attrs !== null ? attrs : null;
  }

IdentifierExpression
  = !"-" _ id:IdentifierNameExpression
  __ expression:IdentifierOperationExpression?
  __ attrs:IdentifierAttributesExpression? {
    return astNode({
      type:       'IdentifierExpression',
      id:         id,
      expression: expression,
      attributes: attrs
    });
  }

/* List */

ListExpression
  = elements:(
    "-" _ elements:ListBlockStatement { return elements; }
  / "[" __ elements:ListBlockStatement __ "]" { return elements; }) {
    return astNode({
      type:  'ListExpression',
      elements: elements !== null ? elements : []
    })
  }
