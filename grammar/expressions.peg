/* Expressions */
_
  = (WhiteSpace / Comment)*
__
  = (WhiteSpace / LineTerminatorSequence / Comment)*

PrimitiveValueExpression
  = BooleanLiteral
  / NumberLiteral
  / StringLiteral
  / ListExpression

UnquotedLiteralInLine
  = UnquotedStringLiteral _ (EndToken / LineTerminatorSequence)?

LiteralSequenceCharacters
  = !(":" / LineTerminator / "[" / "]") char:SingleStringCharacter { return char; }

LiteralSequenceListCharacters
  = !(":" / "," / LineTerminator / "[" / "]") char:SingleStringCharacter { return char; }

UnquotedStringLiteral "unquoted literal"
  = !("-" / ":") _ chars:LiteralSequenceCharacters+ _ (&EndToken / LineTerminatorSequence)? {
    return astNode({
      type: 'StringLiteral',
      value: chars.join(''),
      raw: chars.join('')
    })
  }

UnquotedStringListLiteral "unquoted literal"
  = !("-" / ":") _ chars:LiteralSequenceListCharacters+ _ (&EndToken / LineTerminatorSequence)? {
    return astNode({
      type: 'StringLiteral',
      value: chars.join(''),
      raw: chars.join('')
    })
  }

IdentifierWord
  = letters:IdentifierLetter+ {
    return letters.join("");
  }

Identifier "identifier"
  = !ReservedWord name:IdentifierWord {
    return astNode({
      type: 'Identifier',
      name: name
    });
  }

IdentifierName "identifier"
  = UnquotedStringLiteral

IdentifierCharacter
  = [\-\.\_\$\!]

IdentifierStart
  = UnicodeLetter
  / "$"
  / "_"
  / "\\" sequence:UnicodeEscapeSequence { return sequence; }

IdentifierPart
  = IdentifierCharacter
  / IdentifierStart
  / UnicodeCombiningMark
  / UnicodeDigit
  / UnicodeConnectorPunctuation
  / "\u200C" { return "\u200C"; } // zero-width non-joiner
  / "\u200D" { return "\u200D"; } // zero-width joiner

PostfixExpression
  = operator:PostfixOperator {
      return {
        type:       "PostfixExpression",
        operator:   operator
      };
    }

UnaryExpression
  = PostfixExpression
  / operator:UnaryOperator __ expression:UnaryExpression {
      return {
        type:       "UnaryExpression",
        operator:   operator,
        expression: expression
      };
    }

MultiplicativeExpression
  = head:UnaryExpression
    tail:(__ MultiplicativeOperator __ UnaryExpression)* {
      var result = head;
      for (var i = 0, l = tail.length; i < l; i++) {
        result = {
          type:     "BinaryExpression",
          operator: tail[i][1],
          left:     result,
          right:    tail[i][3]
        };
      }
      return result;
    }

AdditiveExpression
  = head:MultiplicativeExpression
    tail:(__ AdditiveOperator __ MultiplicativeExpression)* {
      var result = head;
      for (var i = 0, l = tail.length; i < l; i++) {
        result = {
          type:     "BinaryExpression",
          operator: tail[i][1],
          left:     result,
          right:    tail[i][3]
        };
      }
      return result;
    }

ShiftExpression
  = head:AdditiveExpression
    tail:(__ AdditiveExpression)* {
      var result = head;
      for (var i = 0, l = tail.length; i < l; i++) {
        result = {
          type:     "BinaryExpression",
          operator: tail[i][1],
          left:     result,
          right:    tail[i][3]
        };
      }
      return result;
    }

RelationalExpression
  = head:ShiftExpression
    tail:(__ RelationalOperator __ ShiftExpression)* {
      var result = head;
      for (var i = 0, l = tail.length; i < l; i++) {
        result = {
          type:     "BinaryExpression",
          operator: tail[i][1],
          left:     result,
          right:    tail[i][3]
        };
      }
      return result;
    }

RelationalExpressionNoIn
  = head:ShiftExpression
    tail:(__ RelationalOperatorNoIn __ ShiftExpression)* {
      var result = head;
      for (var i = 0, l = tail.length; i < l; i++) {
        result = {
          type:     "BinaryExpression",
          operator: tail[i][1],
          left:     result,
          right:    tail[i][3]
        };
      }
      return result;
    }

EqualityExpression
  = head:RelationalExpression
    tail:(__ EqualityOperator __ RelationalExpression)* {
      var result = head;
      for (var i = 0, l = tail.length; i < l; i++) {
        result = {
          type:     "BinaryExpression",
          operator: tail[i][1],
          left:     result,
          right:    tail[i][3]
        };
      }
      return result;
    }

EqualityExpressionNoIn
  = head:RelationalExpressionNoIn
    tail:(__ EqualityOperator __ RelationalExpressionNoIn)* {
      var result = head;
      for (var i = 0, l = tail.length; i < l; i++) {
        result = {
          type:     "BinaryExpression",
          operator: tail[i][1],
          left:     result,
          right:    tail[i][3]
        };
      }
      return result;
    }

/* Indentifier */

IdentifierLiteralExpression
  = id:StringLiteral {
      return id.value;
    }
  / id:Identifier {
      return id.name.trim();
    }

IdentifierNameExpression
  = IdentifierReferenceNegationExpression / IdentifierReferenceExpression / IdentifierLiteralExpression

IdentifierOperationExpression
  = IdentifierMergeExpression / IdentifierCloneExpression

IdentifierArrowExpression
  = IdentifierArrowNegationReferenceExpression / IdentifierArrowReferenceExpression

IdentifierArrowReferenceExpression
  = ">" __ id:IdentifierLiteralExpression {
    return astNode({
      // type as using "&"
      type:   'IdentifierReferenceExpression',
      name:   id
    })
  }

IdentifierArrowNegationReferenceExpression
  = "!>" __ id:IdentifierLiteralExpression {
    return astNode({
      type:   'IdentifierAliasNegationExpression',
      name:   id
    })
  }

IdentifierCloneExpression
  = ">>" __ id:IdentifierLiteralExpression {
    return astNode({
      type:   'IdentifierCloneExpression',
      name:   id
    })
  }

IdentifierMergeExpression
  = ">>>" __ id:IdentifierLiteralExpression {
    return astNode({
      type:   'IdentifierMergeExpression',
      name:   id
    })
  }

IdentifierReferenceExpression
  = ReferenceOperator __ id:IdentifierLiteralExpression {
    return astNode({
      type: 'IdentifierReferenceExpression',
      name: id
    })
  }

IdentifierReferenceNegationExpression
  = LogicalNotOperator ReferenceOperator __ id:IdentifierLiteralExpression {
    return astNode({
      type:    'IdentifierReferenceNegationExpression',
      name:    id
    })
  }

AttributeAssignmentExpression
  = id:IdentifierNameExpression __ value:(StartToken __ value:(PrimitiveValueExpression / IdentifierNameExpression) {
      return value;
    })? {
    var node = astNode({
      type:  'AttributeAssignmentExpression',
      left: {
        type: id.type || 'IdentifierLiteral',
        value: id.value || id
      }
    });
    if (value) {
      if (value.type === 'ListExpression') {
        node.right = value;
      } else {
        node.right = {
          type:  value.type || 'StringLiteral',
          value: value.value || value,
          raw:   value.raw || (typeof value !== 'object' ? value : null)
        };
      }
    }
    return node;
  }

IdentifierAttributesList
  = head:AttributeAssignmentExpression tail:(__ "," __ AttributeAssignmentExpression)* {
    var result = [ head ];
    for (var i = 0, l = tail.length; i < l; i+=1) {
      result.push(tail[i][3]);
    }
    return result;
  }

IdentifierAttributesExpression
  = "(" __ attrs:IdentifierAttributesList? __ ")" {
    return attrs !== null ? attrs : null;
  }

IdentifierExpression
  = id:IdentifierNameExpression __ operation:IdentifierOperationExpression?
    __ ref:IdentifierArrowExpression? __ attrs:IdentifierAttributesExpression? {
    var node;
    switch (id.type) {
      case 'IdentifierReferenceExpression':
        node = astNode({
          type:       'IdentifierExpression',
          name:       id.name,
          reference:  id,
          operation:  operation,
          attributes: attrs
        })
      break;
      case 'IdentifierReferenceNegationExpression':
        node = astNode({
          type:     'IdentifierExpression',
          name:      id.name,
          negation:  true,
          reference: id,
          operation: operation,
          attributes:     attrs
        })
      break;
      default:
        node = astNode({
          type:       'IdentifierExpression',
          name:       id,
          reference:  ref,
          operation:  operation,
          attributes: attrs
        });
      break;
    }
    return node;
  }

/* List */

ListElementsExpressions
  = PrimitiveValueExpression
  / UnquotedStringListLiteral
  / Statement

ListElementExpression
  = head:ListElementsExpressions tail:(__ ElementSeparator? __ ListElementsExpressions)* {
    var result = [ head ];
    for (var i = 0, l = tail.length; i < l; i+=1) {
      result.push(tail[i][3]);
    }
    return result;
  }

ListExpression
  = "-" __ elements:ListElementExpression
  / "[" __ elements:ListElementExpression __ "]" {
    return astNode({
      type:  'ListExpression',
      elements: elements !== null ? elements : []
    })
  }

