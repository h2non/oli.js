/* Lexical Grammar */

SourceCharacter
  = .

WhiteSpace "whitespace"
  = [\t\v\f \u00A0\uFEFF]
  / Zs

IdentifierLetter
  = [a-zA-Z0-9\-\\/\\\_\^\|\º\¨\ç\¡\¿\.\$\@\!\?\%\+\;]

ElementSeparator
  = EOSNoLineTerminator
  / ","

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028" // line separator
  / "\u2029" // paragraph separator

EOF
  = !.

EOS
  = _ LineTerminatorSequence
  / _ EOF
  / __ EndToken

EOSNoLineTerminator
  = _ LineTerminatorSequence
  / _ EOF

/* Comments */

Comment "comment"
  = MultiLineComment
  / SingleLineComment

MultiLineComment
  = "##" (!"##" SourceCharacter)* "##"

MultiLineCommentNoLineTerminator
  = "##" (!("##" / LineTerminator) SourceCharacter)* "##"

SingleLineComment
  = "#" (!LineTerminator SourceCharacter)*

/* Experimental dent-based parsing, todo!

LINE
  = SAMEDENT LINE:(!EOS c:SourceElements { return c; })+ EOS?
    children:( INDENT c:LINE* DEDENT { return c; })?
    {
      var o = {};
      o[LINE] = children;
      return children ? o : LINE.join('');
    }

SAMEDENT
  = i:[ \t]* &{ return i.join('') === indent; }

INDENT
  = i:[ \t]+ &{ return i.length > indent.length; }
    {
      indentStack.push(indent);
      indent = i.join('');
      pos = offset;
    }

DEDENT
  = { indent = indentStack.pop(); }

*/
